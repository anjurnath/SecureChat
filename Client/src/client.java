import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
public class client {
	Socket socket;
	static PrintWriter output;
	static BufferedReader input;
	static BufferedReader inputKey;
	public static String username = "";
	static String symmKeyVal;
	static int count=0;
	public client() throws Exception{
		new ClientConsole();	
		try {
			socket = new Socket("localhost",28753);// Client( local host) is connected to the server with port no:28753
			output = new PrintWriter(socket.getOutputStream(),true);
			input = new BufferedReader(new InputStreamReader(socket.getInputStream()));// to receieve the data from server
			inputKey = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			while(count==0){
				symmKeyVal = inputKey.readLine(); // Symmetric key generated by server is received by the client
				System.out.println("Received: " + symmKeyVal);
				count++;
			}		
			while(true){	
				String cipherText = input.readLine();
				byte[] chatByte = decrypt(symmKeyVal.getBytes(), symmKeyVal.getBytes());// The received ciphertext is decrypted using the received session key
				System.out.println("Decrypted Val: " + cipherText);
				ClientConsole.writeInClientConsole(new String(chatByte));
			}	
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void calling(String chat) throws Exception{
		System.out.println("Encryption starts on " + chat);
		byte[] cipherTextByte = encrypt(symmKeyVal.getBytes(), chat.getBytes());
		System.out.println("Encrypted text: " + cipherTextByte);
		output.println(cipherTextByte);
	}
	// Encryption of the message
	public static byte[] encrypt(byte[] rawVal, byte[] inputByte) throws Exception{
		SecretKeySpec sks = new SecretKeySpec(rawVal, "DES");
		Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, sks);
		byte[] cipherText = cipher.doFinal(inputByte);	
		return cipherText;	
	}
	//Decryption of the message
	public static byte[] decrypt(byte[] rawVal, byte[] cipherText) throws Exception{
		SecretKeySpec sks = new SecretKeySpec(rawVal, "DES");
		Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, sks);
		byte[] decPlainText = cipher.doFinal(cipherText);
		return decPlainText;
	}
	public static void main(String[] args) throws Exception{
		username = JOptionPane.showInputDialog("Enter name");
		client c = new client();
			
	}
}
